import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import { v4 as uuidv4 } from 'uuid';

const app = express();
const PORT = process.env.PORT || 3030;

app.use(cors());
app.use(bodyParser.json());

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–π (–¥–æ 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
const sessionMemory = new Map();

function emojify(text, emoji) {
  return `${text} ${emoji}`;
}

function getMoodReply(message) {
  const lower = message.toLowerCase();
  const time = new Date().getHours();

  if (lower.includes("–æ–¥–∏–Ω") || lower.includes("–≥—Ä—É—Å—Ç")) {
    return emojify("–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Ç–∞–∫...", "ü´Ç");
  } else if (lower.includes("—Å–º–µ—Ä—Ç—å") || lower.includes("—É–º–∏—Ä–∞—Ç—å")) {
    return emojify("–ñ–∏–∑–Ω—å —Å–ª–æ–∂–Ω–∞, –Ω–æ —Ç—ã –Ω–µ –æ–¥–∏–Ω.", "üñ§");
  } else if (lower.includes("–ª—é–±–ª—é") || lower.includes("—Å–µ—Ä–¥—Ü–µ")) {
    return emojify("–û, —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å –æ —á—É–≤—Å—Ç–≤–∞—Ö...", "‚ù§Ô∏è");
  } else if (lower.includes("—Å—á–∞—Å—Ç—å–µ") || lower.includes("—É—Ä–∞")) {
    return emojify("–≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —Å–ª—ã—à–∞—Ç—å!", "üåû");
  } else if (lower.includes("—Å–æ–Ω") || lower.includes("—Å–ø–∞—Ç—å")) {
    return emojify("–ú–æ–∂–µ—Ç, –ø–æ—Ä–∞ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å?", "üåô");
  }

  if (time >= 5 && time < 12) return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!";
  if (time >= 12 && time < 18) return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!";
  if (time >= 18 && time < 23) return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!";
  return "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏...";
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
app.get('/api/session', (req, res) => {
  const sessionId = uuidv4();
  sessionMemory.set(sessionId, []);
  res.json({ sessionId });
});

// –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç-—ç–Ω–¥–ø–æ–∏–Ω—Ç —Å —Å–µ—Å—Å–∏–µ–π
app.post('/api/chat', (req, res) => {
  const { message, sessionId } = req.body;

  if (!message) {
    return res.status(400).json({ reply: '‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.' });
  }
  if (!sessionId || !sessionMemory.has(sessionId)) {
    return res.status(400).json({ reply: '‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è.' });
  }

  const history = sessionMemory.get(sessionId);
  history.push({ role: 'user', text: message });
  if (history.length > 5) history.shift();

  console.log(`[${new Date().toLocaleTimeString()}] [${sessionId}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${message}`);

  const reply = getMoodReply(message);

  history.push({ role: 'bot', text: reply });
  sessionMemory.set(sessionId, history);

  res.json({ reply });
});

app.listen(PORT, () => {
  console.log(`CHA-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});